{
  
    
        "post0": {
            "title": "(1주차) 9월5일에 대한 보강",
            "content": "&#44053;&#51032;&#50689;&#49345; . . import . import matplotlib.pyplot as plt import numpy as np . boxplot . motivating example . (예제1) 전북고등학교: 평균은 좋은 측정값인가? . - 전북고등학교에서 통계학을 수업하는 A선생님과 B선생님의 있다. A선생님에게서 수업을 들을 학생들의 평균은 79.1이고 B선생님에게서 수업을 들은 학생들의 평균은 78.3이다. . y1=[75,75,76,76,77,77,79,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들 y2=[76,76,77,77,78,78,80,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 . np.mean(y1),np.mean(y2) . (79.1, 78.3) . - 의사결정: A선생님에게 배운 학생들의 실력이 평균적으로 더 좋을 것이다. . - 평균은 A반(=A선생님에게 통계학을 배운 반)이 더 높다. 그런데 98점을 받은 학생이 A반에 포함되어서 A반이 전체평균이 높게 나온것이고 나머지 학생들은 전체적으로 B반 학생들이 더 시험을 잘 보았다고 해석할 수 있다. . - 교훈: 단순한 평균비교보다 학생들이 받은 점수의 분포를 비교해보는 것이 중요하다. 분포를 살펴보는 방법 중 유용한 방법이 박스플랏이다. . matplotlib&#51004;&#47196; boxplot &#44536;&#47532;&#44592; . - A반 학생들의 박스플랏 그리기 . plt.boxplot(y1) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f5261164550&gt;, &lt;matplotlib.lines.Line2D at 0x7f5261164810&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f5261164b50&gt;, &lt;matplotlib.lines.Line2D at 0x7f5261164e90&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f5261164310&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52609a4250&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52609a4550&gt;], &#39;means&#39;: []} . - B반 학생들의 박스플랏 그리기 . plt.boxplot(y2) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52608abc10&gt;, &lt;matplotlib.lines.Line2D at 0x7f52608abf50&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52608b32d0&gt;, &lt;matplotlib.lines.Line2D at 0x7f52608b3610&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52608ab910&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52608b3990&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52608b3cd0&gt;], &#39;means&#39;: []} . - A반 학생들의 점수와 B반 학생들의 점수를 나란히 박스플랏으로 그리자. . plt.boxplot([y1,y2]) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f526082bc10&gt;, &lt;matplotlib.lines.Line2D at 0x7f526082bf50&gt;, &lt;matplotlib.lines.Line2D at 0x7f52608413d0&gt;, &lt;matplotlib.lines.Line2D at 0x7f52608416d0&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f52608322d0&gt;, &lt;matplotlib.lines.Line2D at 0x7f5260832610&gt;, &lt;matplotlib.lines.Line2D at 0x7f5260841a10&gt;, &lt;matplotlib.lines.Line2D at 0x7f5260841d50&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f526082b990&gt;, &lt;matplotlib.lines.Line2D at 0x7f5260841090&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f5260832990&gt;, &lt;matplotlib.lines.Line2D at 0x7f526084d0d0&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f5260832cd0&gt;, &lt;matplotlib.lines.Line2D at 0x7f526084d410&gt;], &#39;means&#39;: []} . boxplot&#51060;&#46976;? . - ref: https://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/box_plot.ipynb . np.random.seed(916170) # connection path is here: https://stackoverflow.com/questions/6146290/plotting-a-line-over-several-graphs mu, sigma = 0, 1 # mean and standard deviation s = np.random.normal(mu, sigma, 1000) fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize=(10, 5)) # rectangular box plot bplot = axes.boxplot(s, vert=False, patch_artist=True, showfliers=True, # This would show outliers (the remaining .7% of the data) positions = [0], boxprops = dict(linestyle=&#39;--&#39;, linewidth=2, color=&#39;Black&#39;, facecolor = &#39;red&#39;, alpha = .4), medianprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Yellow&#39;), whiskerprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Blue&#39;, alpha = .4), capprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Black&#39;), flierprops = dict(marker=&#39;o&#39;, markerfacecolor=&#39;green&#39;, markersize=10, linestyle=&#39;none&#39;, alpha = .4), widths = .3, zorder = 1) axes.set_xlim(-4, 4) plt.xticks(fontsize = 14) axes.set_yticks([]) axes.annotate(r&#39;&#39;, xy=(-.73, .205), xycoords=&#39;data&#39;, xytext=(.66, .205), textcoords=&#39;data&#39;, arrowprops=dict(arrowstyle=&quot;|-|&quot;, connectionstyle=&quot;arc3&quot;) ); axes.text(0, .25, &quot;Interquartile Range n(IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=18) axes.text(0, -.21, r&quot;Median&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.text(2.65, -.15, &quot; &quot;Maximum &quot;&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-2.65, -.15, &quot; &quot;Minimum &quot;&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-.68, -.24, r&quot;Q1&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-2.65, -.21, r&quot;(Q1 - 1.5*IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.text(.6745, -.24, r&quot;Q3&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(.6745, -.30, r&quot;(75th Percentile)&quot;, horizontalalignment=&#39;center&#39;, fontsize=12); axes.text(-.68, -.30, r&quot;(25th Percentile)&quot;, horizontalalignment=&#39;center&#39;, fontsize=12); axes.text(2.65, -.21, r&quot;(Q3 + 1.5*IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.annotate(&#39;Outliers&#39;, xy=(2.93,0.015), xytext=(2.52,0.20), fontsize = 18, arrowprops={&#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;black&#39;, &#39;lw&#39;: 2}, va=&#39;center&#39;); axes.annotate(&#39;Outliers&#39;, xy=(-3.01,0.015), xytext=(-3.41,0.20), fontsize = 18, arrowprops={&#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;black&#39;, &#39;lw&#39;: 2}, va=&#39;center&#39;); . plotly&#47196; boxplot &#44536;&#47532;&#44592; . - 로컬에서 하기 위해서는 아래를 설치 (코랩은 필요없음) . !pip install plotly !pip install ipywidgets !pip install jupyter-dash !pip install dash !pip install pandas . import plotly.express as px import pandas as pd from IPython.display import HTML . df= pd.DataFrame({&#39;score&#39;:y1+y2,&#39;class&#39;:[&#39;A&#39;]*len(y1) + [&#39;B&#39;]*len(y2)}) df . score class . 0 75 | A | . 1 75 | A | . 2 76 | A | . 3 76 | A | . 4 77 | A | . 5 77 | A | . 6 79 | A | . 7 79 | A | . 8 79 | A | . 9 98 | A | . 10 76 | B | . 11 76 | B | . 12 77 | B | . 13 77 | B | . 14 78 | B | . 15 78 | B | . 16 80 | B | . 17 80 | B | . 18 80 | B | . 19 81 | B | . fig = px.box(df,x=&#39;class&#39;,y=&#39;score&#39;) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . . histogram . motivating example . - 전북고예제에서 우리의 소망: 그냥 A반 B반 중에 어떤 반이 공부를 더 잘하냐? . 보통 이러한 질문은 중심경향값 중 하나를 골라서 비교하면 되었다. | 여기에서 중심경향값이란 데이터 분포의 중심을 보여주는 값으로 자료 전체를 대표할 수 있는 값을 말함. 평균, 중앙값등이 대표적인 중심경향값이다. | . - 전북고예제에서는 &quot;A반 B반 중에서 어떤 반이 공부를 더 잘하냐?&quot; 라는 질문의 대답으로 단순평균비교로는 의미가 없었다. 오히려 결과론적으로 보면 중앙값이 더 타당해 보인다. . - 그런데 사실 생각해보면 중앙값을 기준으로 B반이 공부를 더 잘했다고 주장하는 것도 애매하다. 어쨌든 가장 공부잘한 학생은 A반에 있으니까! (에이 한명 뿐이잖아요? 라고 생각할 수 있는데 그 한명이 2명 3명으로 점점 늘어난다고 생각해보자, 합리적인 기준을 제시할 수 있는가?) . - 사실 &quot;A반 B반중에 누가 더 공부를 잘하냐?&quot; 라는 질문은 굉장히 대답하기 곤란한 질문이다. 왜냐하면 . 이슈1: 단순 평균비교로 이러한 질문에 답을 하기 어렵다. | 이슈2: 박스플랏으로 전체분포를 파악해도 어떠한 반이 더 공부를 잘한다는 기준을 잡는게 애매하다. | . 그런데 특수한 경우에는 &quot;A반 B반중에 누가 더 공부를 잘하냐?&quot; 라는 질문에 대한 대답을 깔끔하게 할 수 있다. . (예제2) 정규분포 전북고등학교: 평균은 좋은 측정값인가? . - A반과 B반의 통계학 성적이 아래와 같다고 하자. . np.random.seed(43052) y1 = np.random.randn(10000) y2 = np.random.randn(10000) + 0.5 . np.mean(y1),np.mean(y2) . (-0.011790879905079434, 0.4979147460611458) . np.mean(y2) - np.mean(y1) . 0.5097056259662253 . y2의 값이 y1의 값보다 전체적으로 0.5097056259662253 정도 높다고 볼 수 있다? . plt.boxplot([y1,y2]) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f525cf74250&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf74d10&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf9ca90&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf9cf10&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f525cee43d0&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cee4e90&gt;, &lt;matplotlib.lines.Line2D at 0x7f525dc05c90&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf29090&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f525cf74950&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf9c310&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f525cee4a10&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf27990&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f525cee47d0&gt;, &lt;matplotlib.lines.Line2D at 0x7f525cf27690&gt;], &#39;means&#39;: []} . 분포의 모양이 거의 비슷, 왼쪽그림을 컨트롤+C 하여 오른쪽에 붙인다음 0.5정도 y축으로 올린느낌이다! | . - 이러한 상황에서는 &quot;B반의 성적 $ approx$ A반의 성적 + 0.5&quot; 라고 주장해도 큰 무리가 없어보인다. 따라서 이 경우에는 &quot;A반 B반 중에 어떤반이 더 공부를 잘하냐?&quot; 라는 질문에 대하여 &quot;B반이 평균적으로 0.5점정도 더 공부를 잘합니다&quot; 라고 대답해도 괜찮다. . - 결론: 정규분포 분포가정을 한다면 이슈1,2에 대한 문제를 한번에 해결가능함 . - 정규분포가정은 어떻게 할 수 있나? (= 데이터를 보고 어떻게 정규분포라고 알 수 있는가?): 데이터의 히스토그램을 그려서 종 모양이 되는지 확인해본다. (아직 초보단걔라서 이것밖에 모를 수 있어요) . histogram &#51060;&#46976;? . - 히스토그램: X축이 변수의 구간, Y축은 그 구간에 포함된 빈도를 의미하는 그림 . matplotlib&#51004;&#47196; histogram &#44536;&#47532;&#44592; . - 히스토그램의 예시1 . y=[10,11,12,15,16,20,21,22,23,24,25] . plt.hist(y) . (array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]), array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]), &lt;BarContainer object of 10 artists&gt;) . plt.hist(y,bins=10) . (array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]), array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]), &lt;BarContainer object of 10 artists&gt;) . - 히스토그램 예시2 . plt.hist(y,bins=2) #plt.hist(y,bins=1) . (array([5., 6.]), array([10. , 17.5, 25. ]), &lt;BarContainer object of 2 artists&gt;) . - 히스토그램 예시3 . plt.hist(y,bins=3) . (array([3., 2., 6.]), array([10., 15., 20., 25.]), &lt;BarContainer object of 3 artists&gt;) . 가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다. | range / bins = 15 / 3 = 5 이므로 각 구간의 간격은 5이다. | 구간은 [10,15), [15,20), [20,25] 로 나눈다. | 각 구간에 포함된 자료의 수는 3,2,6 이다. | . - 히스토그램 예시4 . plt.hist(y,bins=7) . (array([3., 0., 2., 0., 1., 2., 3.]), array([10. , 12.14285714, 14.28571429, 16.42857143, 18.57142857, 20.71428571, 22.85714286, 25. ]), &lt;BarContainer object of 7 artists&gt;) . 가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다. | range / bins = 15 / 7 = 2.142857142857143 이므로 각 구간의 간격은 2.142857142857143이다. | 구간은 [10,12.14285714), [12.14285714,14.28571429,), [22.85714286,25] 로 나눈다. | 각 구간에 포함된 자료의 수는 3,0,2,0,1,2,3 이다. | . - 히스토그램 예시5 . # np.random.seed(43052) # y1 = np.random.randn(10000) # y2 = np.random.randn(10000) + 0.5 plt.hist([y1,y2],bins=50) . (array([[ 1., 1., 3., 0., 2., 4., 9., 14., 16., 33., 44., 54., 95., 136., 168., 243., 293., 327., 406., 514., 531., 606., 664., 661., 719., 641., 622., 587., 531., 486., 385., 312., 249., 188., 150., 91., 66., 47., 33., 20., 19., 13., 8., 4., 2., 1., 0., 1., 0., 0.], [ 0., 0., 0., 1., 0., 3., 2., 5., 5., 6., 10., 23., 26., 43., 78., 104., 123., 158., 244., 284., 374., 396., 468., 542., 595., 680., 701., 715., 636., 592., 590., 496., 437., 394., 323., 250., 194., 145., 123., 75., 49., 38., 29., 20., 11., 3., 3., 4., 1., 1.]]), array([-4.12186916, -3.95213741, -3.78240567, -3.61267392, -3.44294217, -3.27321042, -3.10347867, -2.93374692, -2.76401517, -2.59428342, -2.42455167, -2.25481992, -2.08508817, -1.91535642, -1.74562467, -1.57589292, -1.40616117, -1.23642942, -1.06669767, -0.89696592, -0.72723417, -0.55750243, -0.38777068, -0.21803893, -0.04830718, 0.12142457, 0.29115632, 0.46088807, 0.63061982, 0.80035157, 0.97008332, 1.13981507, 1.30954682, 1.47927857, 1.64901032, 1.81874207, 1.98847382, 2.15820557, 2.32793732, 2.49766906, 2.66740081, 2.83713256, 3.00686431, 3.17659606, 3.34632781, 3.51605956, 3.68579131, 3.85552306, 4.02525481, 4.19498656, 4.36471831]), &lt;a list of 2 BarContainer objects&gt;) . seaborn&#51004;&#47196; histogram &#44536;&#47532;&#44592; . import seaborn as sns . df=pd.DataFrame({&#39;score&#39;:np.concatenate([y1,y2]), &#39;class&#39;:[&#39;A&#39;]*len(y1)+[&#39;B&#39;]*len(y2)}) df . score class . 0 0.383420 | A | . 1 1.084175 | A | . 2 1.142778 | A | . 3 0.307894 | A | . 4 0.237787 | A | . ... ... | ... | . 19995 0.493276 | B | . 19996 0.619512 | B | . 19997 -0.500529 | B | . 19998 1.267551 | B | . 19999 1.004863 | B | . 20000 rows × 2 columns . sns.histplot(df,x=&#39;score&#39;,hue=&#39;class&#39;) . &lt;AxesSubplot:xlabel=&#39;score&#39;, ylabel=&#39;Count&#39;&gt; . plotnine&#51004;&#47196; histogram &#44536;&#47532;&#44592; . from plotnine import * . ggplot(df) + geom_histogram(aes(x=&#39;score&#39;,fill=&#39;class&#39;),position=&#39;identity&#39;,alpha=0.5) . /home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/stat_bin.py:95: PlotnineWarning: &#39;stat_bin()&#39; using &#39;bins = 84&#39;. Pick better value with &#39;binwidth&#39;. . &lt;ggplot: (8749427142589)&gt; . ggplot(df) + geom_histogram(aes(x=&#39;score&#39;,fill=&#39;class&#39;),alpha=0.5) ## 비교를 위해서 관찰만 할것 . /home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/stat_bin.py:95: PlotnineWarning: &#39;stat_bin()&#39; using &#39;bins = 84&#39;. Pick better value with &#39;binwidth&#39;. . &lt;ggplot: (8749427066673)&gt; . plotly&#47196; histogram &#44536;&#47532;&#44592; . import plotly.figure_factory as ff hist_data = [y1, y2] group_labels = [&#39;A&#39;, &#39;B&#39;] # Create distplot with curve_type set to &#39;normal&#39; fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_rug=False) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . . &#49689;&#51228; . (1) 자기학번으로 np.random.seed(202043052)를 만들고 . (2) y1, y2 // 10만개의 정규분포를 생성해서 저장 . y1: 평균 0, 표준편차=1 | y2: 평균 1, 표준편차=1 | . (3) plotly 를 활용하여 히스토그램을 겹쳐서 그려보는것. .",
            "url": "https://guebin.github.io/DV2022/2022/09/10/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%945%EC%9D%BC.html",
            "relUrl": "/2022/09/10/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%945%EC%9D%BC.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "(A2) 데이터시각화 강의소개",
            "content": "&#44596;&#44553;&#44277;&#51648; . - 강의실 변경: (221 $ to$ 227 (?)) . - 노트북 지참필수 . 노트북이 없으면? 자연대 2호관 121호 빅데이터사업단, 조성균 선생님 (063-219-5627) 에게 (1) 신분증(or 학생증) (2) 시간표를 출력하여 방문할 시 한학기 동안 대여 가능 | . - 휴강: 9월5일, 7일, 12일 휴강 -&gt; 강의영상업로드로 보충 . &#51068;&#48152;&#44277;&#51648; . - 강의노트는 어디에? . 2022년 강의노트 | 2021년 강의노트 &lt;- 2021년 중간고사/기말고사 기출문제 + 풀이포함 | . - 학점은 어떻게? . F가 나갈 수 있음!! | . - 출석? . 고민중 | . - 질문하는 방법? (여기로 가서 적당한 방법으로) . 인사생략하고 용건만 간단히! | . &#51452;&#51032;&#49324;&#54637; (&#51060; &#49688;&#50629;&#51012; &#46307;&#51648; &#47568;&#50500;&#50556; &#54624; &#51060;&#50976;?) . - 시험문제의 난이도 . - 수업시간이 너무 길다 . - 재미없음 . - cost-effective 하지 않음.. (특히 파이썬입문을 듣지 않았다면!) .",
            "url": "https://guebin.github.io/DV2022/2022/09/05/(A2)-%EA%B0%95%EC%9D%98%EC%86%8C%EA%B0%9C.html",
            "relUrl": "/2022/09/05/(A2)-%EA%B0%95%EC%9D%98%EC%86%8C%EA%B0%9C.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기",
            "content": "About this doc . - 본 포스트는 2021년 1학기 Python 입문 강의내용중 일부를 업로드 하였음. . - Github, fastpages를 사용하여 블로그를 개설하고 관리하는 방법에 대한 설명임. . .",
            "url": "https://guebin.github.io/DV2022/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "date": " • Aug 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "최규빈 . guebin@jbnu.ac.kr | 자연과학대학교 본관 205호 | 카카오톡 오픈채널1 | . 2022년 2학기 종료 후 폐쇄 예정 &#8617; . |",
          "url": "https://guebin.github.io/DV2022/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guebin.github.io/DV2022/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}